{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNp4f+MmLXmK15sZhA9ppuP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Fr3m5Ghklu7c"},"outputs":[],"source":["# Import packages\n","import tensorflow as tf\n","import numpy as np\n","from tensorflow.keras import datasets, layers, models\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Data: Train and Test Split\n","# Model / data parameters\n","num_classes = 10\n","input_shape = (28, 28, 1)\n","\n","# the data, split between train and test sets\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n","\n","# Scale images to the [0, 1] range\n","x_train = x_train.astype(\"float32\") / 255\n","x_test = x_test.astype(\"float32\") / 255\n","# Make sure images have shape (28, 28, 1)\n","x_train = np.expand_dims(x_train, -1)\n","x_test = np.expand_dims(x_test, -1)\n","print(\"x_train shape:\", x_train.shape)\n","print(x_train.shape[0], \"train samples\")\n","print(x_test.shape[0], \"test samples\")\n","\n","# convert class vectors to binary class matrices\n","\n","plt.figure(figsize=(10,10))\n","for i in range(25):\n","    plt.subplot(5,5,i+1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    plt.grid(False)\n","    plt.imshow(np.squeeze(x_train[i,:,:,:]))\n","    # The CIFAR labels happen to be arrays,\n","    # which is why you need the extra index\n","    plt.xlabel(y_train[i])\n","plt.show()\n","\n","y_train = tf.keras.utils.to_categorical(y_train, num_classes)\n","y_test = tf.keras.utils.to_categorical(y_test, num_classes)\n","\n","\n","\n","# Model CNN\n","\n","model = tf.keras.Sequential(\n","    [\n","        tf.keras.Input(shape=input_shape),\n","        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2, 2)),\n","        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2, 2)),\n","        layers.Flatten(),\n","        layers.Dropout(0.5),\n","        layers.Dense(num_classes, activation=\"softmax\"),\n","    ]\n",")\n","\n","model.summary()\n","\n","batch_size = 128\n","epochs = 15\n","\n","model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n","\n","history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)\n","\n","score = model.evaluate(x_test, y_test, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])\n","\n","plt.plot(history.history['accuracy'], label='accuracy')\n","plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('accuracy')\n","plt.ylim([0.5, 1])\n","plt.legend(loc='lower right')\n","\n","test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)\n","\n","test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)\n","plt.plot(history.history['accuracy'], label='accuracy')\n","plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('accuracy')\n","plt.ylim([0.5, 1])\n","plt.legend(loc='lower right')\n","\n","import numpy as np\n","datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n","    featurewise_center=True,\n","    featurewise_std_normalization=True,\n","    rotation_range=20,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    validation_split=0.2)\n","# compute quantities required for featurewise normalization\n","# (std, mean, and principal components if ZCA whitening is applied)\n","datagen.fit(x_train)\n","# fits the model on batches with real-time data augmentation:\n","history = model.fit(datagen.flow(x_train, y_train, subset='training'), batch_size=batch_size, epochs=epochs)\n","\n","test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)\n","\n","from tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Dropout, Dense, Flatten\n","from tensorflow.keras.models import Sequential\n","\n","\n","# Create the model\n","model1 = Sequential()\n","model1.add(Conv2D(32, (3, 3), padding='same',input_shape=(32, 32, 3)))\n","model1.add(Activation('relu'))\n","model1.add(Conv2D(32, (3, 3)))\n","model1.add(Activation('relu'))\n","model1.add(MaxPooling2D(pool_size=(2, 2)))\n","model1.add(Dropout(0.25))\n","\n","model1.add(Conv2D(64, (3, 3), padding='same'))\n","model1.add(Activation('relu'))\n","model1.add(Conv2D(64, (3, 3)))\n","model1.add(Activation('relu'))\n","model1.add(MaxPooling2D(pool_size=(2, 2)))\n","model1.add(Dropout(0.25))\n","\n","model1.add(Flatten())\n","model1.add(Dense(512))\n","model1.add(Activation('relu'))\n","model1.add(Dropout(0.5))\n","model1.add(Dense(10))\n","model1.add(Activation('softmax'))"]},{"cell_type":"markdown","source":["Task 2"],"metadata":{"id":"2W3PuljNl5oR"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.datasets import cifar10\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Dropout, Flatten, Dense\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Load CIFAR-10 dataset\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","\n","# Normalize pixel values to be between 0 and 1\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","\n","# Define class names\n","class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n","\n","# Display 10 images from each category\n","plt.figure(figsize=(15, 15))\n","for i in range(10):\n","    class_indices = np.where(y_train.flatten() == i)[0][:10]\n","    for j, idx in enumerate(class_indices):\n","        plt.subplot(10, 10, i * 10 + j + 1)\n","        plt.xticks([])\n","        plt.yticks([])\n","        plt.grid(False)\n","        plt.imshow(x_train[idx], cmap=plt.cm.binary)\n","        plt.xlabel(class_names[i])\n","plt.show()\n","\n","# Create the CNN model\n","model = Sequential()\n","model.add(Conv2D(32, (3, 3), padding='same', input_shape=(32, 32, 3)))\n","model.add(Activation('relu'))\n","model.add(Conv2D(32, (3, 3)))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(64, (3, 3), padding='same'))\n","model.add(Activation('relu'))\n","model.add(Conv2D(64, (3, 3)))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","\n","model.add(Flatten())\n","model.add(Dense(512))\n","model.add(Activation('relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(10))\n","model.add(Activation('softmax'))\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))\n","\n","# Evaluate the model on test data\n","test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\n","print(f'Test accuracy: {test_acc}')\n","\n","# Display the training history (accuracy)\n","plt.plot(history.history['accuracy'], label='Training Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"J2BdspEVl62i"},"execution_count":null,"outputs":[]}]}