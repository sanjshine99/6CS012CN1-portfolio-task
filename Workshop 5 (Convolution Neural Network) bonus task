{"cells":[{"cell_type":"markdown","metadata":{"id":"ggOuIlPnXp2i"},"source":["Bonus task"]},{"cell_type":"markdown","metadata":{"id":"NcOYRTbzkcDE"},"source":["Task 1: Implement CNN Architecture"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":12354,"status":"ok","timestamp":1704203315569,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"kPwqy2eskeEt"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"elapsed":21525,"status":"ok","timestamp":1704203351919,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"hVWMOrh7kiuj","outputId":"3f86f19f-5084-47d6-cc73-c7cb5c1b5616"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-7fcebac4-608f-4caf-b407-05e561df14fc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7fcebac4-608f-4caf-b407-05e561df14fc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n"]},{"output_type":"execute_result","data":{"text/plain":["{'kaggle.json': b'{\"username\":\"sanjanabandara\",\"key\":\"b682e79e21b39ed1367aac617be451ab\"}'}"]},"metadata":{},"execution_count":3}],"source":["# Load the dataset from Kaggle\n","!pip install -q kaggle\n","from google.colab import files\n","files.upload()"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":61763,"status":"ok","timestamp":1704203421444,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"qARtGVmLksXp","outputId":"f4ce15e1-6b3a-4280-bfc3-320b4ab3130e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading chest-xray-pneumonia.zip to /content\n","100% 2.29G/2.29G [00:59<00:00, 45.4MB/s]\n","100% 2.29G/2.29G [00:59<00:00, 41.3MB/s]\n"]}],"source":["!mkdir ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"B4TI95iJk4lQ","executionInfo":{"status":"ok","timestamp":1704203473885,"user_tz":-330,"elapsed":35187,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"}}},"outputs":[],"source":["# Unzip the dataset\n","!unzip -q chest-xray-pneumonia.zip"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nNLU-CpflQ20","executionInfo":{"status":"ok","timestamp":1704203493979,"user_tz":-330,"elapsed":551,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"}}},"outputs":[],"source":["# Path to the dataset\n","train_path = 'chest_xray/train'\n","test_path = 'chest_xray/test'"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":819,"status":"ok","timestamp":1704203509851,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"6nvLjyG2lT0V","outputId":"fa44a222-8c8d-4d21-b77c-02980ea8a4df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 5216 images belonging to 2 classes.\n","Found 624 images belonging to 2 classes.\n"]}],"source":["# Data augmentation\n","train_datagen = ImageDataGenerator(rescale=1./255,\n","                                   shear_range=0.2,\n","                                   zoom_range=0.2,\n","                                   horizontal_flip=True)\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_set = train_datagen.flow_from_directory(train_path,\n","                                             target_size=(64, 64),\n","                                             batch_size=32,\n","                                             class_mode='binary')\n","\n","test_set = test_datagen.flow_from_directory(test_path,\n","                                           target_size=(64, 64),\n","                                           batch_size=32,\n","                                           class_mode='binary')"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1247951,"status":"ok","timestamp":1704204762186,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"PcxElIVelVos","outputId":"f568bf2d-c1bf-4517-dcdf-2e72d60f09c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","163/163 [==============================] - 100s 608ms/step - loss: 0.3632 - accuracy: 0.8462 - val_loss: 0.4045 - val_accuracy: 0.8285\n","Epoch 2/10\n","163/163 [==============================] - 98s 600ms/step - loss: 0.2163 - accuracy: 0.9118 - val_loss: 0.3468 - val_accuracy: 0.8606\n","Epoch 3/10\n","163/163 [==============================] - 99s 607ms/step - loss: 0.2081 - accuracy: 0.9158 - val_loss: 0.5525 - val_accuracy: 0.7965\n","Epoch 4/10\n","163/163 [==============================] - 94s 577ms/step - loss: 0.1709 - accuracy: 0.9340 - val_loss: 0.4221 - val_accuracy: 0.8381\n","Epoch 5/10\n","163/163 [==============================] - 95s 581ms/step - loss: 0.1863 - accuracy: 0.9271 - val_loss: 0.2385 - val_accuracy: 0.9071\n","Epoch 6/10\n","163/163 [==============================] - 98s 603ms/step - loss: 0.1550 - accuracy: 0.9408 - val_loss: 0.2866 - val_accuracy: 0.8958\n","Epoch 7/10\n","163/163 [==============================] - 98s 604ms/step - loss: 0.1553 - accuracy: 0.9425 - val_loss: 0.3985 - val_accuracy: 0.8590\n","Epoch 8/10\n","163/163 [==============================] - 101s 617ms/step - loss: 0.1366 - accuracy: 0.9473 - val_loss: 0.4386 - val_accuracy: 0.8397\n","Epoch 9/10\n","163/163 [==============================] - 99s 608ms/step - loss: 0.1317 - accuracy: 0.9502 - val_loss: 0.2569 - val_accuracy: 0.9103\n","Epoch 10/10\n","163/163 [==============================] - 101s 620ms/step - loss: 0.1300 - accuracy: 0.9530 - val_loss: 0.2721 - val_accuracy: 0.9151\n","20/20 [==============================] - 7s 337ms/step - loss: 0.2721 - accuracy: 0.9151\n","Test Loss: 0.2720804810523987, Test Accuracy: 0.9150640964508057\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}],"source":["# CNN Model\n","model = Sequential()\n","\n","model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Conv2D(64, (3, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Flatten())\n","model.add(Dense(units=128, activation='relu'))\n","model.add(Dense(units=1, activation='sigmoid'))\n","\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","history = model.fit(train_set, epochs=10, validation_data=test_set)\n","\n","# Evaluate on test set\n","test_loss, test_acc = model.evaluate(test_set)\n","print(f\"Test Loss: {test_loss}, Test Accuracy: {test_acc}\")\n","\n","# Save the model\n","model.save('pneumonia_detection_model.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":559},"executionInfo":{"elapsed":12263,"status":"ok","timestamp":1704181167870,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"YOw9MEXjy_nM","outputId":"e0e7412a-ecd8-4be3-fb2b-fb705d95dc38"},"outputs":[{"name":"stdout","output_type":"stream","text":["20/20 [==============================] - 7s 308ms/step\n"]},{"data":{"image/png":"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CERwcLAeeohz2QAA3CgcERDTpk2zewQAAGDAEV8kBQAAbiyOOAJRtWrVq37fw/79+wtxGgAA8GccERB9+/b1eJyVlaWtW7dq2bJlGjhwoD1DAQCAK3JEQPTp0yfX5ZMmTdLmzZsLeRoAAPBnHH0NRKtWrTR//ny7xwAAAJdwdEDMmzdPpUuXtnsMAABwCUecwqhTp47HRZSWZenYsWNKTU3V5MmTr/JMAABgB0cERLt27Twee3l5qWzZsmrSpIlq1Khhz1AAAOCKHPFV1vmNr7IGnI2vsgacK69fZe2YayD27dunV199VU888YSOHz8uSVq6dKl27txp82QAAOBSjgiINWvWKCYmRhs3blRiYqLS0n69t/z27ds1dOhQm6cDAACXckRADBo0SP/4xz+0YsUK+fr6upc3a9ZMGzZssHEyAACQG0cExLfffqv27dtftjwsLEwnTpywYSIAAHA1jgiI4OBgHT169LLlW7duVaVKlWyYCAAAXI0jAuLxxx/XK6+8omPHjsnlciknJ0fr16/XgAED1LlzZ7vHAwAAl3BEQIwaNUo1atRQlSpVlJaWppo1a6pRo0a6++679eqrr9o9HgAAuISjvgciJSVFO3bsUFpamurUqaNq1apd0374HgjA2fgeCMC58vo9EI74JsrfhIeHKzw83O4xAADAn3BEQGRnZyshIUErV67U8ePHlZOT47F+1apVNk0GAABy44iA6NOnjxISEnT//ferdu3aHjfWAgAAzuOIgJgzZ47mzp2r1q1b2z0KAADIA0d8CsPX11dRUVF2jwEAAPLIEQHRv39/vfPOO3LQB0IAAMBVOOIUxrp165ScnKylS5eqVq1a8vHx8VifmJho02QAACA3jgiI4ODgXO+FAQAAnMnWgMjJydEbb7yh7777TpmZmWrWrJmGDRumgIAAO8cCAAB/wtZrIF5//XX9/e9/V/HixVWpUiXFx8erZ8+edo4EAADywNaAmDFjhiZPnqzly5crKSlJCxcu1KxZsy77IikAAOAstgZESkqKx3c/NG/eXC6XS0eOHLFxKgAA8GdsDYiLFy/K39/fY5mPj4+ysrJsmggAAOSFrRdRWpalLl26yM/Pz73swoULev755xUUFORexsc4AQBwFlsDIi4u7rJlnTp1smESAABgwtaAmDZtmp0vDwAArpEjvsoaAADcWAgIAABg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\n","text/plain":["<Figure size 600x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Task 2: Plot a confusion matrix\n","y_true = test_set.classes\n","y_pred = model.predict(test_set).round()\n","\n","cm = confusion_matrix(y_true, y_pred)\n","\n","plt.figure(figsize=(6, 6))\n","sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False,\n","            xticklabels=['Normal', 'Pneumonia'], yticklabels=['Normal', 'Pneumonia'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"M6HwhIEfzJrk"},"source":["Task 2: Observing Training and Validation Loss Values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"elapsed":797,"status":"ok","timestamp":1704181177932,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"EBwob_GtzNHm","outputId":"5aeb6bdd-a490-4c31-c315-8e7168c6f7aa"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"RFUFXf0szSST"},"source":["Task 3: Implementing a Fix"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":462},"executionInfo":{"elapsed":51312,"status":"error","timestamp":1704186727298,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"NHs05L5CzSyx","outputId":"044f3fde-524a-4a6d-fab6-fe3a2df12d26"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n"," 85/163 [==============>...............] - ETA: 44s - loss: 0.5932 - accuracy: 0.7357"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-df95251b3470>\u001b[0m in \u001b[0;36m<cell line: 23>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;31m# Evaluate on test set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1805\u001b[0m                         ):\n\u001b[1;32m   1806\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1807\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1808\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m       return tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    869\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1321\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1322\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1323\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1324\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1325\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1484\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1487\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["from tensorflow.keras.layers import Dropout\n","\n","model = Sequential()\n","\n","model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(64, (3, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Dropout(0.25))\n","\n","model.add(Flatten())\n","model.add(Dense(units=128, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(units=1, activation='sigmoid'))\n","\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","history = model.fit(train_set, epochs=10, validation_data=test_set)\n","\n","# Evaluate on test set\n","test_loss, test_acc = model.evaluate(test_set)\n","print(f\"Test Loss: {test_loss}, Test Accuracy: {test_acc}\")\n","\n","# Save the model\n","model.save('pneumonia_detection_model_fixed')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"elapsed":795,"status":"ok","timestamp":1704183923716,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"s3WlRU7x4oox","outputId":"5cbf061a-1417-4397-8af5-3ca92ef7e010"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"elapsed":52673,"status":"ok","timestamp":1704185810855,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"qAUbGwBKVVJM","outputId":"eb807d80-6295-4816-c2e5-76dc6a31b24c"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["1/1 [==============================] - 0s 32ms/step\n","The model predicts this image as Normal\n"]}],"source":["from tensorflow.keras.preprocessing.image import load_img, img_to_array\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Load the image\n","img = load_img('/content/chest_xray/chest_xray/test/NORMAL/IM-0010-0001.jpeg', target_size=(64, 64))\n","\n","# Display the image\n","plt.imshow(img)\n","plt.show()\n","\n","# Convert the image to a numpy array\n","img_array = img_to_array(img)\n","\n","# Expand dimensions of the image\n","img_array = np.expand_dims(img_array, axis=0)\n","\n","# Preprocess the image (if necessary)\n","img_array /= 255.\n","\n","# Use the model to make a prediction\n","prediction = model.predict(img_array)\n","\n","# The model returns a probability between 0 and 1\n","if prediction < 0.5:\n","    print(\"The model predicts this image as Normal\")\n","else:\n","    print(\"The model predicts this image as Pneumonia\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"elapsed":795,"status":"ok","timestamp":1704185888002,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"LS7y6BSRY_-2","outputId":"38485d32-9ff5-4c2d-c0ba-2e1fdff3f1f9"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["1/1 [==============================] - 0s 29ms/step\n","The model predicts this image as Pneumonia\n"]}],"source":["from tensorflow.keras.preprocessing.image import load_img, img_to_array\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Load the image\n","img = load_img('/content/chest_xray/chest_xray/test/PNEUMONIA/person100_bacteria_478.jpeg', target_size=(64, 64))\n","\n","# Display the image\n","plt.imshow(img)\n","plt.show()\n","\n","# Convert the image to a numpy array\n","img_array = img_to_array(img)\n","\n","# Expand dimensions of the image\n","img_array = np.expand_dims(img_array, axis=0)\n","\n","# Preprocess the image (if necessary)\n","img_array /= 255.\n","\n","# Use the model to make a prediction\n","prediction = model.predict(img_array)\n","\n","# The model returns a probability between 0 and 1\n","# You can convert this to a label\n","if prediction < 0.5:\n","    print(\"The model predicts this image as Normal\")\n","else:\n","    print(\"The model predicts this image as Pneumonia\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":485,"status":"ok","timestamp":1704186089849,"user":{"displayName":"Sanjana Bandara","userId":"00355962272634621592"},"user_tz":-330},"id":"d1HAlIswaADM","outputId":"24adb2d3-25d0-46cb-f97e-efa82832babf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Accuracy: 91.35%\n"]}],"source":["from sklearn.metrics import accuracy_score\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_true, y_pred)\n","\n","# Print accuracy\n","print(f'Test Accuracy: {accuracy * 100:.2f}%')\n"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOfC4yR/rWKaZP1oWUTuScB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}